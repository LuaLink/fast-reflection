/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "me.champeau.jmh" version "0.7.2"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

repositories {
    mavenCentral()
}

dependencies {
    api "org.ow2.asm:asm:${version_asm}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${version_junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${version_junit}"
}

group = 'me.sunlan'
version = '1.0.2'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.named('test') {
    jvmArgs(['-Xms512m', '-Xmx512m', '-XX:MetaspaceSize=256m', '-XX:MaxMetaspaceSize=256m', '-XX:+UseG1GC'])

    // Use junit platform for unit tests.
    useJUnitPlatform()
}

jmh {
    jvmArgs = ['-Xms2g', '-Xmx2g', '-XX:MetaspaceSize=512m', '-XX:MaxMetaspaceSize=512m', '-XX:+UseG1GC']
    jmhVersion = '1.37'
    includeTests = true
    duplicateClassesStrategy = DuplicatesStrategy.WARN
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes(
            'Automatic-Module-Name': 'me.sunlan.fastreflection'
        )
    }
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    enableRelocation = true
    relocationPrefix = "me.sunlan.fastreflection.shaded"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'fast-reflection'
            artifact shadowJar.archiveFile
            artifact javadocJar
            artifact sourcesJar
            signing {
                sign shadowJar
                sign javadocJar
                sign sourcesJar
            }
            pom {
                name = 'Fast Reflection'
                description = 'Yet another extremely fast alternative for Java reflection'
                url = 'https://github.com/daniellansun/fast-reflection'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'sunlan'
                        name = 'Daniel Sun'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/daniellansun/fast-reflection.git'
                    developerConnection = 'scm:git:ssh://github.com/daniellansun/fast-reflection.git'
                    url = 'https://github.com/daniellansun/fast-reflection'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('mavenUsername') ? project.property('mavenUsername') : System.getenv('MAVEN_USERNAME')
                password = project.hasProperty('mavenPassword') ? project.property('mavenPassword') : System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}

signing {
    if (project.hasProperty("signing.keyId") && project.hasProperty("signing.password")) {
        useGpgCmd()
    }
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.withType(Wrapper).configureEach {
    gradleVersion = version_gradle
}
